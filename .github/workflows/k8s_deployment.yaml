name: Deploy to Kubernetes Cluster

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - task_*

permissions:
  id-token: write   # This is required for requesting the JWT
  contents: read    # This is required for actions/checkout

env:
  TERRAFORM_VERSION: '1.9.6'
  AWS_GHA_ROLE: 'arn:aws:iam::035511759406:role/GithubActionsRole'
  AWS_REGION: 'us-east-1'

jobs:
  k8s:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.7

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Install helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
          
      - name: Setup kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG }}" > ~/.kube/config
          chmod 600 ~/.kube/config

      - name: Check k8s nodes
        run: |
          kubectl get nodes

      - name: Add Bitnami Helm repository
        run: |
          helm repo add bitnami https://charts.bitnami.com/bitnami

      - name: Update Helm repositories
        run: |
          helm repo update

      - name: Create a namespace for Monitoring stack
        run: |
          kubectl apply -f k8s/namespace.yaml

      - name: Upgrade or Install Helm Chart 'node-exporter'
        run: |
          helm upgrade --install node-exporter bitnami/node-exporter --namespace monitoring \
            --set tolerations[0].key=node-role.kubernetes.io/control-plane \
            --set tolerations[0].operator=Exists \
            --set tolerations[0].effect=NoSchedule

      - name: Upgrade or Install Helm Chart 'kube-state-metrics'
        run: |
          helm upgrade --install kube-state-metrics bitnami/kube-state-metrics --namespace monitoring

      - name: Upgrade or Install Helm Chart 'prometheus'
        run: |
          helm upgrade --install prometheus bitnami/prometheus --namespace monitoring -f prometheus/prometheus-values.yaml

      - name: Get or create configmap for Grafana dashboard
        run: |
          if kubectl get configmap k8s-dashboard -n monitoring; then
            echo "ConfigMap k8s-dashboard exists already"
          else
            kubectl create configmap k8s-dashboard --from-file=grafana/1860_rev37.json -n monitoring
          fi

      - name: Get or create configmap for Grafana contact points
        run: |
          if kubectl get configmap grafana-alerting-config -n monitoring; then
            echo "ConfigMap grafana-smtp-secret exists already"
          else
            kubectl create configmap grafana-alerting-config --from-file=grafana/contact-points.yaml -n monitoring
          fi

      - name: Get or create a separate secret for Grafana password
        run: |
          if kubectl get secret grafana-admin-secret -n monitoring; then
            echo "Secret grafana-admin-secret exists already"
          else
            kubectl create secret generic grafana-admin-secret -n monitoring --from-literal=password=$(openssl rand -base64 12)
          fi

      - name: Get or create secret for Grafana SMTP
        run: |
          if kubectl get secret grafana-smtp-secret -n monitoring; then
            echo "Secret grafana-smtp-secret exists already"
          else
            kubectl create secret generic grafana-smtp-secret -n monitoring \
              --from-literal=user="${{ secrets.SMTP_USER }}" \
              --from-literal=password="${{ secrets.SMTP_PASSWORD }}"
          fi

      - name: Upgrade or Install Helm Chart 'grafana'
        run: |
          helm upgrade --install grafana bitnami/grafana --namespace monitoring -f grafana/grafana-values.yaml

      - name: Getting of Grafana public URL
        run: |
          sleep 30
          kubectl get svc grafana --namespace monitoring -o jsonpath='{.status.loadBalancer.ingress[0].hostname}'
